// Задание 3. Валидация IP-адреса
// Что нужно сделать
// Проверьте, задаёт ли введённая пользователем строка корректный IP-адрес четвёртой
// версии (IPv4). IP-адрес должен представлять из себя четыре числа, разделённые
// точками без пробелов, причём каждое число должно быть в диапазоне от 0 до 255
// включительно. Числа не должны содержать ведущих нулей. Других символов в строке,
// кроме вышеописанных, быть не должно.

// Пользователь вводит строку, задающую IP-адрес через стандартный ввод. В результате
// программа должна вывести слово Valid, если адрес корректен, и слово Invalid, если
// это не так.

// Примеры
// Корректные:
// 127.0.0.1
// 255.255.255.255
// 1.2.3.4
// 55.77.213.101

// Некорректные:
// 255.256.257.258 (есть числа больше 255)
// 0.55.33.22. (лишняя точка в конце)
// 10.00.000.0 (лишние нули)
// 23.055.255.033 (опять лишние нули)
// 65.123..9 (две точки подряд)
// a.b.c.d (посторонние символы вместо чисел и точек)

// Рекомендации
// Активно используйте оператор индексации строки str[i], но помните, что индексы
// начинаются с нуля, а не с единицы.
// Создайте отдельную функцию для получения отдельных чисел из IP-адреса и
// валидируйте эти отдельные числа.
// Для валидации отдельных цифр у чисел следует использовать оператор сравнения с
// константами символов. Символы от ‘0’ до ‘9’ расположены последовательно и поэтому
// уместны операторы <= и >=.
// Вам потребуется функция, принимающая на вход строку со всем IP-адресом и порядковый
// номер октета. Октет — это часть IP-адреса между точками. Он содержится в восьми
// битах, отсюда и название (окта — восемь). 2^8 = 256. Отсюда уже предел значения
// октета — 255. То есть вызов get_address_part(“192.168.1.1”, 1) вернёт 168. Данная
// функция проходит по всей строке и ищет разделители — точки, одновременно с этим
// накапливает символы в строку, которую вернёт в результате. При нахождении
// разделителя нужно вернуть полученную строку. Проверку её корректности нужно делать
// в другой функции (проверить длину == 3 и то, что число в строке находится в
// диапазоне [0,255] ).

#include <iostream>
#include <string>

bool dotCheck(std::string str)
{
    int dotCount = 0;

    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] == '.')
            dotCount++;

        if (i > 0 && str[i] == '.' && str[i - 1] == '.')
        {
            std ::cout << "Ошибка! Две точки подряд.\n";
            return false;
        }
    }

    if (dotCount > 3 || dotCount < 3)
    {
        std ::cout << "Ошибка! Некорректное количество октетов.\n";
        return false;
    }

    return true;
}

// функция проходит по всей строке и ищет разделители — точки, одновременно с этим
// накапливает символы в строку, которую вернёт в результате.
std::string get_address_part(std::string str, int oktNum)
{
    int count = 0;
    std::string retStr = "";

    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] == '.')
            count++;

        else if (count == oktNum)
            retStr += str[i];
    }

    return retStr;
}

// Проверку её корректности нужно делать
// в другой функции (проверить длину == 3 и то, что число в строке находится в
// диапазоне [0,255] ).
bool checkOkt(std::string str)
{
    int okt = 0;

    if (str.length() > 3 || str.length() == 0)
        return false;

    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] >= '0' && str[i] <= '9')
            okt = okt * 10 + (str[i] - '0');

        else
        {
            std ::cout << "Ошибка! Есть посторонние символы вместо чисел\n";
            return false;
        }

        if (i == 1 && okt == 0)
        {
            std ::cout << "Ошибка! Есть лишние нули.\n";
            return false;
        }

        if (i == 1 && str[0] == '0')
        {
            std ::cout << "Ошибка! Есть лишние нули.\n";
            return false;
        }
    }

    if (okt <= 255)
        return true;
    else
    {
        std ::cout << "Ошибка! Есть числа больше 255.\n";
        return false;
    }
}

int main()
{
    std::string str;
    bool parse = true;

    std::cout << "Введите IP-адрес: ";
    std::cin >> str;

    parse = dotCheck(str);

    if (parse)
        for (int i = 0; i < 4; i++)
        {
            parse = checkOkt(get_address_part(str, i));
            if (!parse)
                break;
        }

    if (parse)
        std::cout << "Valid. \n";
    else
        std::cout << "Invalid. \n";
}