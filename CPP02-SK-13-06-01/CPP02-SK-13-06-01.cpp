// Задача 1. Удаление чисел равных X 

// Необходимо из заданного пользователем вектора удалить число X.

// Как работает программа
// Пользователь вводит с клавиатуры число n — размер вектора, который надо заполнять.
// Пользователь вводит n целых чисел, которые заполняют вектор.
// Пользователь вводит значение — X. X — удаляемое из вектора значение.
// Необходимо удалить из вектора все элементы, которые равны заданному значению.
// В конце программы необходимо вывести итоговое состояние вектора.

// Пример выполнения 
// Input vector size: 5 
// Input numbers: 1 3 3 5 1 
// Input number to delete: 3 
// Result: 1 5 1

// Что оценивается
// Не удалено лишних элементов.
// Все элементы, которые необходимо удалить, удалены.
// Для удаления элементов из вектора использована функция pop_back().
// Порядок элементов не изменился.
// Удаления из вектора совершены in-place.
// Решение использует только один вектор.


#include <iostream>
#include <vector>

void printVec(std::vector<int> vec)
{
    std::cout << "{";
    for (int i = 0; i < vec.size(); i++)
    {
        std::cout << vec[i];
        if (i == vec.size() - 1)
            break;
        else
            std::cout << ", ";
    }
    std::cout << "}\n";
}

int main()
{
    std::vector<int> vec;
    int d, n, m;

    std::cout << "Введите размер вектора (N): ";
    std::cin >> n;

    std::cout << "Введите значения вектора: ";

    for (int i = 0; i < n; i++)
    {
        std::cin >> m;
        vec.push_back(m);
    }

    std::cout << "Введите значения для удаления: ";
    std::cin >> d;

    for (int z = vec.size() - 1; z >= 0; z--)
    {
        if (vec[z] == d)
        {
            for (int j = z; j < vec.size() - 1; j++)
            {
                vec[j] = vec[j + 1];
            }

            vec.pop_back();
        }
    }

    std::cout << "Результат: ";
    printVec(vec);
}